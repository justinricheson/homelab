# Settings > General > Backup Settings
#   Select: Dns Settings
# Settings > General > Restore Settings

# externalTrafficPolicy: Local is used so that the ip is only advertised from node(s) where the pod is running.
# Without this, MetalLB will arp advertise the ip on all nodes, and internally proxy requests when they land on a node where the pod isn't running.
# However, doing this means that the requests are internally NAT'ed, causing the source ip's to be replaced with an internal k8s ip.
# This causes technitium to show all requests coming from a single internal ip.

---
apiVersion: v1
kind: Namespace
metadata:
  name: technitium-dns

---
apiVersion: v1
kind: Service
metadata:
  name: technitium-dns
  namespace: technitium-dns
  annotations:
    metallb.universe.tf/address-pool: default-pool
spec:
  selector:
    app: technitium-dns
  type: LoadBalancer
  loadBalancerIP: 192.168.0.10
  externalTrafficPolicy: Local
  ports:
  - name: dns
    protocol: UDP
    port: 53
    targetPort: 53
  - name: http
    protocol: TCP
    port: 5380
    targetPort: 5380

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: technitium-dns
  namespace: technitium-dns
spec:
  ingressClassName: traefik
  rules:
  - host: dns.home.justinricheson.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: technitium-dns
            port:
              number: 5380
  tls:
  - hosts:
    - dns.home.justinricheson.com
    secretName: wildcard-tls

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: wildcard-cert
  namespace: technitium-dns
spec:
  secretName: wildcard-tls
  commonName: '*.home.justinricheson.com'
  dnsNames:
    - '*.home.justinricheson.com'
  issuerRef:
    name: letsencrypt-wildcard
    kind: ClusterIssuer
  privateKey:
    rotationPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: technitium-dns
  namespace: technitium-dns
  labels:
    app: technitium-dns
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: technitium-dns
  template:
    metadata:
      labels:
        app: technitium-dns
    spec:
      containers:
      - name: technitium-dns
        image: technitium/dns-server:latest
        ports:
        - containerPort: 53
        - containerPort: 5380
        volumeMounts:
        - name: config
          mountPath: /etc/dns
          readOnly: false
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: config-pvc
      nodeSelector:
        kubernetes.io/hostname: pi1 # Make sure volume and dp are on same node

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: config-pvc
  namespace: technitium-dns
spec:
  volumeName: config
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: config
  namespace: technitium-dns
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/technitium-dns-config
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - pi1 # Make sure volume and dp are on same node